#!/bin/bash

sett="""'''
Django settings for $1 project.

Generated by 'django-admin startproject' using Django 1.9.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
'''

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 's^jqc%grgx&a@alt=ibe1uu%2)q71@1s69n&5v)%-$d)j%fp7x'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    '$2',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = '$1.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = '$1.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

"""

urls="""
'''$1 URL Configuration

The  list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/1.9/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  url(r'^$', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  url(r'^$', Home.as_view(), name='home')
Including another URLconf
    1. Add an import:  from blog import urls as blog_urls
    2. Import the include() function: from django.conf.urls import url, include
    3. Add a URL to urlpatterns:  url(r'^blog/', include(blog_urls))
'''
from django.conf.urls import url
from django.contrib import admin
from .settings import MEDIA_ROOT

urlpatterns = [
    url(r'^$', '$2.views.main', name='home'),
    url(r'^admin/', admin.site.urls),
    url(r'^media/(?P<path>)$', 'django.views.static.serve', {'document_root': MEDIA_ROOT}),
    url(r'^media/(?P<path>.*)$', 'django.views.static.serve', {'document_root': MEDIA_ROOT})
]
"""

views="""
# -*- coding: utf-8 -*-
from django.shortcuts import render
from django.http import HttpResponse
from .models import Advantage
from .models import Usluga
from .models import HeaderSlide

def main(request):
    advantages = Advantage.objects.all()
    uslugi = Usluga.objects.all()
    headerslides_all=[]
    headerslidefirst=[]
    headerslides=[]
    headerslides_all = HeaderSlide.objects.all()
    if len(headerslides_all) > 0:
        headerslidefirst = headerslides_all[0]
    if len(headerslides_all) > 1:
        headerslides = headerslides_all[1:]
    
    return render(request, '$1/index.html', {'advantages': advantages, 'uslugi': uslugi, 'headerslides':headerslides, 'headerslidefirst':headerslidefirst})
"""

admin="""
from django.contrib import admin
from .models import Advantage
from .models import Usluga
from .models import HeaderSlide
# Register your models here.
admin.site.register(Advantage)
admin.site.register(Usluga)
admin.site.register(HeaderSlide)
"""

models="""
# -*- coding: utf-8 -*-

from __future__ import unicode_literals

from django.db import models

# Create your models here.

class HeaderSlide(models.Model):
    class Meta(object):
        verbose_name = u'Слайд шапки'
        verbose_name_plural = u'Слайды шапки'
    def __unicode__(self):
        return self.h1

    h1 = models.CharField(max_length=256,
        blank=False,
        verbose_name=u'Название')

    h2 = models.CharField(max_length=256,
        blank=True,
        verbose_name=u'h2')

    image = models.ImageField(
        blank=True,
        verbose_name=u'Фото',
        null=True)
    

class Usluga(models.Model):
    class Meta(object):
        verbose_name = u'Услуга'
        verbose_name_plural = u'Услуги'
    def __unicode__(self):
        return self.title

    title = models.CharField(max_length=256,
        blank=False,
        verbose_name=u'Название')

    image = models.ImageField(
        blank=True,
        verbose_name=u'Фото',
        null=True)

    option1 = models.CharField(max_length=256,
        blank=True,
        verbose_name=u'Характеристика 1')
    option2 = models.CharField(max_length=256,
        blank=True,
        verbose_name=u'Характеристика 2')
    option3 = models.CharField(max_length=256,
        blank=True,
        verbose_name=u'Характеристика 3')
    option4 = models.CharField(max_length=256,
        blank=True,
        verbose_name=u'Характеристика 4')
    option5 = models.CharField(max_length=256,
        blank=True,
        verbose_name=u'Характеристика 5')

    price = models.CharField(max_length=256,
        blank=True,
        verbose_name=u'Цена')

class Advantage(models.Model):
    class Meta(object):
        verbose_name = u'Преимущество'
        verbose_name_plural = u'Преимущества'
    def __unicode__(self):
        self.content_part=self.content[0:100]
        return u'%s : %s ...' % (self.title, self.content_part)

    title = models.CharField(max_length=256,
        blank=False,
        verbose_name=u'Название')

    image = models.ImageField(
        blank=True,
        verbose_name=u'Фото',
        null=True)

    content = models.TextField(blank=True,
        verbose_name=u'Описание')
"""
seti= "$1.settings"
manage='''
#!/usr/bin/env python
import os
import sys

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "'$1'.settings")

    from django.core.management import execute_from_command_line

    execute_from_command_line(sys.argv)
'''

cd /data/work/virtualenvs/magaz/src/"$1"/
#mkdir media
cd "$1"/
rm -rf urls.py settings.py
echo "$urls" > urls.py
echo "$sett" > settings.py 
echo 'done 1'
cd /data/work/virtualenvs/magaz/src/"$1"/"$2"/
rm -rf views.py
echo "$views" > views.py
echo "$admin" > admin.py
echo "$models" > models.py
echo 'done 2'

cd /data/work/virtualenvs/magaz/src/"$1"/"$2"/
rm -rf static
mkdir -p /data/work/virtualenvs/magaz/src/"$1"/"$2"/templates/"$1"/
cp -R /home/dima/scripts/magaz_files/magazapp/static/ /data/work/virtualenvs/magaz/src/"$1"/"$2"/
cp -R /home/dima/scripts/magaz_files/magazapp/templates/magaz/index.html /data/work/virtualenvs/magaz/src/"$1"/"$2"/templates/"$1"/index.html
cp -R /home/dima/scripts/magaz_files/media/ /data/work/virtualenvs/magaz/src/"$1"/
cp -R /home/dima/scripts/magaz_files/db.sqlite3 /data/work/virtualenvs/magaz/src/"$1"/
cd /data/work/virtualenvs/magaz/src/"$1"/
rm -rf manage.py
echo "$manage" > manage.py
python manage.py makemigrations
python manage.py migrate